{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JsonService {\n  constructor(http) {\n    this.http = http;\n    this.dataUrl = 'assets/sample.json';\n  }\n  /**\n   * Fetches a JSON response, parses it and converts it into a 1D array\n   * to be searched through.\n   *\n   * @returns {Item[]} Array of items to search through.\n   */\n  fetchSearchList() {\n    return this.http.get(this.dataUrl).pipe(map(data => {\n      const objectList = data.objectList;\n      let itemArray = [];\n      // Get rid of property containing array\n      for (let property in objectList) {\n        if (objectList.hasOwnProperty(property) && Array.isArray(objectList[property])) {\n          itemArray = itemArray.concat(objectList[property]);\n        }\n      }\n      return itemArray;\n    }));\n  }\n  static #_ = this.ɵfac = function JsonService_Factory(t) {\n    return new (t || JsonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JsonService,\n    factory: JsonService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","JsonService","constructor","http","dataUrl","fetchSearchList","get","pipe","data","objectList","itemArray","property","hasOwnProperty","Array","isArray","concat","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/json.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface Item {\n    id: number;\n    name: string;\n    value: number;\n    listorder: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JsonService {\n    private dataUrl = 'assets/sample.json';\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Fetches a JSON response, parses it and converts it into a 1D array\n     * to be searched through.\n     *\n     * @returns {Item[]} Array of items to search through.\n     */\n    public fetchSearchList(): Observable<Item[]> {\n        return this.http.get<any>(this.dataUrl).pipe(\n            map(data => {\n                const objectList = data.objectList;\n                let itemArray: Item[] = [];\n\n                // Get rid of property containing array\n                for (let property in objectList) {\n                    if (objectList.hasOwnProperty(property) && Array.isArray(objectList[property])) {\n                        itemArray = itemArray.concat(objectList[property]);\n                    }\n                }\n\n                return itemArray;\n            })\n        );\n    }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAYpC,OAAM,MAAOC,WAAW;EAGpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,oBAAoB;EAEE;EAExC;;;;;;EAMOC,eAAeA,CAAA;IAClB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,OAAO,CAAC,CAACG,IAAI,CACxCP,GAAG,CAACQ,IAAI,IAAG;MACP,MAAMC,UAAU,GAAGD,IAAI,CAACC,UAAU;MAClC,IAAIC,SAAS,GAAW,EAAE;MAE1B;MACA,KAAK,IAAIC,QAAQ,IAAIF,UAAU,EAAE;QAC7B,IAAIA,UAAU,CAACG,cAAc,CAACD,QAAQ,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACL,UAAU,CAACE,QAAQ,CAAC,CAAC,EAAE;UAC5ED,SAAS,GAAGA,SAAS,CAACK,MAAM,CAACN,UAAU,CAACE,QAAQ,CAAC,CAAC;;;MAI1D,OAAOD,SAAS;IACpB,CAAC,CAAC,CACL;EACL;EAAC,QAAAM,CAAA,G;qBA3BQf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}